# Construction de l'image à partir du Dockerfile

docker build -t my_lamp .

# Exécution de l'image

docker run -d --name my_lamp_c -p 8000:80 my_lamp

->  http://localhost:8000/

########################
# Ajout de persistance #
########################

# Création du volume

docker volume create --name mysqldata

# Exécution de l'image avec des volumes
# - le volume nommé "mysqldata" est basé sur le dossier /var/lib/mysql
docker run -d --name my_lamp_c -v mysqldata:/var/lib/mysql -p 8000:80 my_lamp

##############################
# Utilisation docker-compose #
##############################


# Contruction de l'image à partir du nouveau Dockerfile (épuré par raport au précédent)
# Celle-ci contient une couche OS, Apache et Php
# Remarque : l'image se base sur une image officielle php avec le tag 8.0.11-apache qui vient déjà avec un OS
# Remarque2 : l'image mysql sera utilisé dans le fichier docker-compose.yml

docker build -t myapp .

# LANCEMENT SANS DOCKER-COMPOSE

# Lancement du conteneur de la base de données
# Note : le dernier volume est une astuce pour créer automatiquement la table SQL.
#        -> lorsqu'un conteneur mysql démarre, il exécute les fichiers d'extensions ".sh" et ".sql" dans /docker-entrypoint-initdb.d

docker run -d -e MYSQL_ROOT_PASSWORD='test' \
-e MYSQL_DATABASE='test' \
-e MYSQL_USER='test' \
-e MYSQL_PASSWORD='test' \
--volume db-volume:/var/lib/mysql \
--volume $PWD/articles.sql:/docker-entrypoint-initdb.d/articles.sql \
--name mysql_c mysql:5.7

# Lancement du conteneur de l'application web

docker run -d --volume $PWD/app:/var/www/html -p 8000:80 --link mysql_c --name myapp_c myapp

# LANCEMENT AVEC DOCKER-COMPOSE

docker-compose up -d

